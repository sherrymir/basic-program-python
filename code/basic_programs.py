# -*- coding: utf-8 -*-
"""Basic Programs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I4f0ccut_kIlwfZHmYbgHl8a485mnKaf
"""

def count_wages(day,hw,hours):
  wage = hw * hours
  if day == "sunday":
    wage = wage * 2
  return wage

day = input("Enter the day: ")
hourly_wage = int(input("Enter the hourly wage: "))
hours = int(input("Enter the hours you worked for: "))

result = count_wages(day,hourly_wage,hours)
print("Total income: ",result)

def agers(age):
  text = ""
  if age < 0:
    text += "That must be mistake"
  elif age >= 0 and age <= 5:
    text += "i suspect you cant write quite yet"
  else:
    text += f"okay, you are {age}"
  return text

result = agers(int(input("Enter your age: ")))
print(result)

def nephews(name):
  if name in ("Huey","Dewey","Louie"):
    print("oh, you are one of the Donald Duck's nephew")
  elif name in ("Morty","Ferdie"):
    print("Your are one of the Micky Mouse's newphew")
  else:
    print("you are not from around here")

nephews(input("Please type in your name: "))

def grader(func):
    def wrapper(grade):
        print("Grade: ", end="")
        func(grade)
    return wrapper


@grader
def grade_check(grade):
  if 0 < grade > 100:
    print("Impossible")
  elif 0 <= grade <= 49:
    print("Failed")
  elif 50 <= grade <= 59:
    print("1")
  elif 60 <= grade <= 69:
    print("2")
  elif 70 <= grade <= 79:
    print("3")
  elif 80 <= grade <= 89:
    print("4")
  elif 90 <= grade <= 100:
    print("5")

grade_check(int(input("Enter your numbers: ")))

def fizzbuzz(number):
  if number % 3 == 0 and number % 5 == 0:
    print("fizzbuzz")
  elif number % 3 == 0:
    print("fizz")
  elif number % 5 == 0:
    print("buzz")

fizzbuzz(int(input("number: ")))

def check_leapyear(year):
  if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
    return True
  else:
    return False

result = check_leapyear(int(input('Enter the year: ')))
print(result)

from math import sqrt

def check_sqrt():
  while True:
    number = int(input("Enter the number: "))
    if number == 0:
      print("Exiting...")
      break
    elif number < 0:
      print("Invalid number...")
      continue
    else:
      print(f"The sqrt of the number {sqrt(number):.2f}")
      continue

check_sqrt()

number = 5
print("Countdown!")
while True:
  print(number)
  number = number - 1
  if number == 0:
    break

print("Now!")

def create_password(password):
  while True:
    repeat = input("Repeat password: ")
    if password != repeat:
      print("They do not match")
    else:
      print("User Account created!")
      break

create_password(input("Enter the password: "))

import copy
year = int(input("Enter the year: "))
old = year
while True:
  year += 1

  if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
    print(f"The next leap year after {old} is {year}")
    break

result = ""
previous_word = None
while True:
  word = input("Please type in a word: ")
  if word == "end" or previous_word == word:
    print(result)
    break

  result += word + " "
  previous_word = word

count = 0
total = 0
positive = 0
negative = 0
while True:
  number = int(input("Enter the number: "))
  if number == 0:
    print(f"The count of numbers is {count}")
    print(f"The sum of numbers is {total}")
    print(f"The mean of numbers is {total / count}")
    print(f"Positive number: {positive}")
    print(f"Negative number: {negative}")
    break
  count += 1
  total += number
  if number > 0:
    positive += 1
  elif number < 0:
    negative += 1

number = int(input("Enter the numeber: "))
while number >= 2 and number <= 30:
  if not number % 2:
    print(number)
          number += 1
print("Execution finished")

print("Are you ready?")
number = int(input("Please type in a number: "))
while number > 0:
  print(number)
  number -= 1
print("Now!")

number = int(input("Upper Limit: "))
value = 1
while value > 0 and value < number:
  print(value)
  value += 1
print("Execution end")

number = int(input("Upper Limit: "))
base = int(input("Enter the base: "))
value = 1
while value <= number:
  print(value)
  value *= base
print("Execution end")

number = int(input("Enter the total: "))
value = 1
total = 0

while total < number:
  print(value)
  total += value
  value += 1
print("Total value: ",total)

number = int(input("Upper bound: "))
value = 1
result = 0
text = ""

while result < number:
  print(value)
  result += value
  text += f"{value} + "
  value += 1
print(f"The consecutive sum: {text[:-2]} = ",result)

n = 10
rows = "*"
while n > 0:
  print(" "*n + rows)
  rows += "**"
  n -= 1

word = input("Please type in a string: ")
print(word)
print("-"*len(word))

a = input("Please type in string 1: ")
b = input("Please type in string 2: ")

if len(a) == len(b):
  print("The strings are equally long")
elif len(a) > len(b):
  print(f"The {a} is longer")
else:
  print(f"The {b} is longer")

a = input("Please type in a string: ")
print("First Character: ",a[0])
print("Last Character: ", a[-1])

a = input("Please type in a string: ")
index = len(a)
while index > 0:
  index -= 1
  print(a[index])

word = input("Please type in a string: ")

if word[1] == word[-2]:
  print("The second character and second to last character is {}".format(word[1]))
else:
  print("The second character and second to last character are different.")

hashes = int(input("Enter the number of hashes you want: "))
print(hashes * "#")

Height = int(input("Enter the heigth: "))
width = int(input("Enter the width: "))
while width > 0:
  print("#"*Height)
  width -= 1

a = input("Please type in a string: ")
print(a.rjust(20,"*"))

word = input("word: ")
print("*" * 30)
print("*",word.center(26),"*")
print("*" * 30)

vowels = "aeo"
sentence = input("Please type in a sentence: ")
result = ""
for i in vowels:
  if i in sentence:
    result += f"{i} found "
  else:
    result += f"{i} not found "
print(result)

word = input("please type in a word: ")

while True:
  character = input("What are you looking for: ")
  found = word.find(character)
  if found >= 0:
    print(f"{word[found:found+3]}")
  else:
    print("Not found")
    break

word = input("please enter the word: ")
character = input("Please type in a character: ")

result = []
for i in range(len(word)):
  if character == word[i]:
    result.append(word[i:i+3])

print(" ".join(result))

word = input("Please type in a string: ")

while True:
  sub_string = input("Please type in a sub string: ")
  first_sub = word.find(sub_string)
  if first_sub < 0:
    print("There is no matching result found")
    break

  second_sub = word.find(sub_string,first_sub + len(sub_string))

  if second_sub >= 0:
    print("The second substring is found at index {}".format(second_sub))
  else:
    print("There is no occurance of second substring")

value = int(input("please type in a number: "))
found = False
for i in range(2,10):
  for j in range(1,10):
    print(f"{i} X {j} = {i * j}")
    if i * j == value:

      found = True
      break
  if found:
    break

sentence = input("Please type in sentence: ")
result = []
for word in sentence.split():
  result.append(word[0])
print(" ".join(result))

import random

ques = 54321245987
number = int(input("Please type in a numeber:"))
result = []

for i in str(ques):
  if int(i) <= number:
    result.append(i)

random.shuffle(result)
print(" ".join(result))

def factorial(number = int(input("Type in a number: "))):
  while True:
    sum = 1
    for i in range(1,number+1):
      sum *= i
    print("The factorial of the number is ",sum)
    break


factorial()

def print_many_times(time,text):
  for i in range(time):

if __name__ == "__main__":
  text = "grow up"
  print_many_times(3,text)
    print(text)

def hash_square(n):
  for i in range(n):
      print(n*"#")
if __name__ == "__main__":
  hash_square(5)

def chess_board(n):
  for i in range(n):
    rows = "".join("1" if (i+j) % 2 == 0 else "0" for j in range(n))
    print(rows)
chess_board(5)

def squared(text,n):
  for i in range(n):
    rows = "".join(text[(i+j) % len(text)] for j in range(n))
    print(rows)

squared("najam",6)

def squared(text,n):
  for i in range(n):
    rows = "".join(text[(i+j) % len(text)] for j in range(n))
    print(rows)

squared("najam",5)

def spruce(length):
  space = length * 2 - 1
  stars = 1

  for i in range(1,length+1):
    print((stars * "*").center(space," "))
    stars += 2

  print("â˜…".center(space))

spruce(5)

list =  [1, 2, 3, 4, 5]

ind = int(input("index: "))
new = int(input("New Value: "))

list[ind] = new

print(list)

list = ['apple','mangoes','banana','orange']

index = len(list) - 1

while index >= 0:
  print(list[index])
  index = index - 1
print('thats it')

def longest(strings : list):
  index = len(strings) - 1
  greatest = len(strings[0])
  value_counter = strings[0]
  while index >= 0:
    if len(strings[index]) > greatest:
      greatest = len(strings[index])
      value_counter = strings[index]
    index = index - 1

  return value_counter

if __name__ == '__main__':
  strings = ["hi", "hiya", "hello", "howdydoody", "hi there"]
  result = longest(strings)
  print(result)

def longest(strings):
  return max(strings,key = len)

if __name__ == '__main__':
  strings = ["hi", "hiya", "hello", "howdydoody", "hi there"]
  result = longest(strings)
  print(result)

def sum_of_row(matrix: list,row : int):
  row_sum = 0
  row_number = matrix[row]
  for row in row_number:
    row_sum += row
  return row_sum

if __name__ == "__main__":
  m = [[4, 2, 3, 2], [9, 1, 12, 11], [7, 8, 9, 5], [2, 9, 15, 1]]

  my_sum = sum_of_row(m, 1)
  print(my_sum)

def sum_of_col(matrix: list,col: int):
  col_sum = 0
  for row in matrix:
    col_sum += row[col]
  return col_sum

if __name__ == "__main__":
  m = [[4, 2, 3, 2], [9, 1, 12, 11], [7, 8, 9, 5], [2, 9, 15, 1]]
  result = sum_of_col(m,0)
  print(result)

m = [[1,2,3],[4,5,6],[7,8,9]]
for i in range(len(m)):
  for j in range(len(m[i])):
    m[i][j] += 1

print(m)

def count_matching_elements(matrix : list, element : int):
  count = 0
  for i in range(len(matrix)):
    for j in range(len(matrix[i])):
      if matrix[i][j] == element:
        count = count + 1
  return count

if __name__ == "__main__":
  m = [[1,2,3],[1,1,6],[1,8,9]]
  result = count_matching_elements(m,1)
  print(result)

sudoku = [
  [9, 0, 0, 0, 8, 0, 3, 0, 0],
  [0, 0, 0, 2, 5, 0, 7, 0, 0],
  [0, 2, 0, 3, 0, 0, 0, 0, 4],
  [0, 9, 4, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 7, 3, 0, 5, 6, 0],
  [7, 0, 5, 0, 6, 0, 4, 0, 0],
  [0, 0, 7, 8, 0, 3, 9, 0, 0],
  [0, 0, 1, 0, 0, 0, 0, 0, 3],
  [3, 0, 0, 0, 0, 0, 0, 0, 2]
]

def print_grid():
  global sudoku
  for row in sudoku:
    for square in row:
      if square > 0:
        print(square,end = "")
      else:
        print("_",end = "")
    print()

if __name__ == "__main__":
  print_grid()

def who_won(game_board: list):
  player_one = 0
  player_two = 0

  for row in range(len(game_board)):
    for square in range(len(game_board[row])):
      if game_board[i][j] == 1:
        player_one += 1
      elif game_board[i][j] == 2:
        player_one += 1

  if player_one > player_two:
    print("Player one wins!!!")
  elif player_two > player_one:
    print("Player two wins!!")
  else:
    print("Draw!")

if __name__ == "__main__":
  board = [[1,0,1],
           [1,1,1],
           [0,1,2],
           [2,2,1]]
  who_won(board)

def row_correct(sudoku : list, row_no: int):
  seen = set()
  for num in sudoku[row_no]:
    if num != 0:
      if num in seen:
        return False
      seen.add(num)

  return True

if __name__ == "__main__":
  sudoku = [
  [9, 0, 0, 0, 8, 0, 3, 0, 0],
  [2, 0, 0, 2, 5, 0, 7, 0, 0],
  [0, 2, 0, 3, 0, 0, 0, 0, 4],
  [2, 9, 4, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 7, 3, 0, 5, 6, 0],
  [7, 0, 5, 0, 6, 0, 4, 0, 0],
  [0, 0, 7, 8, 0, 3, 9, 0, 0],
  [0, 0, 1, 0, 0, 0, 0, 0, 3],
  [3, 0, 0, 0, 0, 0, 0, 0, 2]
]
  print(row_correct(sudoku, 0))
  print(row_correct(sudoku, 1))

def column_correct(sudoku : list, column_no: int):
  result = set()

  for num in sudoku:
    if num[column_no] != 0:
       if num[column_no] in result:
        return False
       result.add(num[column_no])
  return True

if __name__ == '__main__':
  sudoku = [
  [9, 0, 0, 0, 8, 0, 3, 0, 0],
  [2, 0, 0, 2, 5, 0, 7, 0, 0],
  [0, 2, 0, 3, 0, 0, 0, 0, 4],
  [2, 9, 4, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 7, 3, 0, 5, 6, 0],
  [7, 0, 5, 0, 6, 0, 4, 0, 0],
  [0, 0, 7, 8, 0, 3, 9, 0, 0],
  [0, 0, 1, 0, 0, 0, 0, 0, 3],
  [3, 0, 0, 0, 0, 0, 0, 0, 2]
]
  print(column_correct(sudoku, 0))
  print(column_correct(sudoku, 1))

def block_correct(sudoku: list,row_no: int,col_no: int):
  seen = set()
  for row in range(row_no, row_no + 3):
    for col in range(col_no, col_no + 3):
      if sudoku[row][col] != 0:
        if sudoku[row][col] in seen:
          return False
        seen.add(sudoku[row][col])
  return True

if __name__ == "__main__":
  sudoku = [
  [9, 0, 0, 0, 8, 0, 3, 0, 0],
  [2, 0, 0, 2, 5, 0, 7, 0, 0],
  [0, 2, 0, 3, 0, 0, 0, 0, 4],
  [2, 9, 4, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 7, 3, 0, 5, 6, 0],
  [7, 0, 5, 0, 6, 0, 4, 0, 0],
  [0, 0, 7, 8, 0, 3, 9, 0, 0],
  [0, 0, 1, 0, 0, 0, 0, 0, 3],
  [3, 0, 0, 0, 0, 0, 0, 0, 2]
]

print(block_correct(sudoku, 0, 0))
print(block_correct(sudoku, 1, 2))

def sudoku_grid_correct(sudoku: list):

  def row_correct(sudoku: list,row_no: int):
    seen = set()
    for i in sudoku[row_no]:
      if i != 0:
        if i in seen:
          return False
        seen.add(i)
    return True

  def col_correct(sudoku: list, col_no: int):
    seen = set()
    for row in sudoku:
      value = row[col_no]
      if value != 0:
        if value in seen:
          return False
        seen.add(value)
    return True

  def block_correct(sudoku: list, row_no: int, col_no: int):
    seen = set()
    for row in range(row_no,row_no+3):
      for col in range(col_no,col_no+3):
        if sudoku[row][col] != 0:
          if sudoku[row][col] in seen:
            return False
          seen.add(sudoku[row][col])
    return True

  for i in range(9):
    if not row_correct(sudoku,i) or not col_correct(sudoku,i):
      return False

  for row in range(0,9,3):
    for col in range(0,9,3):
      if not block_correct(sudoku,row,col):
        return False

  return True

if __name__ ==  "__main__":
  sudoku1 = [
  [9, 0, 0, 0, 8, 0, 3, 0, 0],
  [2, 0, 0, 2, 5, 0, 7, 0, 0],
  [0, 2, 0, 3, 0, 0, 0, 0, 4],
  [2, 9, 4, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 7, 3, 0, 5, 6, 0],
  [7, 0, 5, 0, 6, 0, 4, 0, 0],
  [0, 0, 7, 8, 0, 3, 9, 0, 0],
  [0, 0, 1, 0, 0, 0, 0, 0, 3],
  [3, 0, 0, 0, 0, 0, 0, 0, 2]
]

  print(sudoku_grid_correct(sudoku1))
  sudoku2 = [
  [2, 6, 7, 8, 3, 9, 5, 0, 4],
  [9, 0, 3, 5, 1, 0, 6, 0, 0],
  [0, 5, 1, 6, 0, 0, 8, 3, 9],
  [5, 1, 9, 0, 4, 6, 3, 2, 8],
  [8, 0, 2, 1, 0, 5, 7, 0, 6],
  [6, 7, 4, 3, 2, 0, 0, 0, 5],
  [0, 0, 0, 4, 5, 7, 2, 6, 3],
  [3, 2, 0, 0, 8, 0, 0, 5, 7],
  [7, 4, 5, 0, 0, 3, 9, 0, 1]
]

  print(sudoku_grid_correct(sudoku2))

def double_items(number: list):
  numbers = number.copy()
  for num in range(len(numbers)):
    numbers[num] = numbers[num] * 2
  return numbers

if __name__ == "__main__":
    numbers = [2, 4, 5, 3, 11, -4]
    numbers_doubled = double_items(numbers)
    print("original:", numbers)
    print("doubled:", numbers_doubled)

def remove_smallest(numbers: list):
  minimum = min(numbers)
  numbers.remove(minimum)
  return numbers

if __name__ == "__main__":
  numbers = [2, 4, 6, 1, 3, 5]
  remove_smallest(numbers)
  print(numbers)

import copy

def print_sudoku(sudoku: list):
  for i, row in enumerate(sudoku):
    for j,col in enumerate(row):
      if col == 0:
        print("_",end = ' ')
      else:
        print(col,end = " ")
      if (j + 1) % 3 == 0 and j < 8:
        print(" ",end = "")
    print()
    if (i + 1) % 3 == 0 and i < 8:
        print()

def add_number(sudoku: list,row: int,col: int,value: int):
  sudoku[row][col] = value

if __name__ == '__main__':
  sudoku  = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
]

print_sudoku(sudoku)
add_number(sudoku, 0, 0, 2)
add_number(sudoku, 1, 2, 7)
add_number(sudoku, 5, 7, 3)
print()
print("Three numbers added:")
print()
print_sudoku(sudoku)

import copy

def print_sudoku(sudoku: list):
  for i, row in enumerate(sudoku):
    for j,col in enumerate(row):
      if col == 0:
        print("_",end = ' ')
      else:
        print(col,end = " ")
      if (j + 1) % 3 == 0 and j < 8:
        print(" ",end = "")
    print()
    if (i + 1) % 3 == 0 and i < 8:
        print()

def copy_and_add_number(sudo: list,row: int,col: int,value: int):
  sudoku = copy.deepcopy(sudo)
  sudoku[row][col] = value
  return sudoku

if __name__ == '__main__':
  sudoku  = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
]


grid_copy = copy_and_add_number(sudoku, 0, 0, 2)
grid_copy_1 = copy_and_add_number(grid_copy, 1, 2, 7)
grid_copy_2 = copy_and_add_number(grid_copy_1, 5, 7, 3)
print()
print("Copy:")
print()
print_sudoku(grid_copy_2)
print("\n\nOriginal: ")
print_sudoku(sudoku)

def play_turn(game_board: list,col: int,row: int,piece: str):
    if game_board[row][col] in ["X","O"]:
      print("Square was occupied")
      return False
    elif game_board[row][col] == "":
      game_board[row][col] = piece
      return True
    return False

if __name__ == "__main__":
  game_board = [["", "", ""], ["", "", ""], ["", "", ""]]
  print(play_turn(game_board, 2, 0, "X"))
  print(game_board)

def transpose(matrix: list)-> list:
  return [list(rows) for rows in zip(*matrix)]

if __name__ == '__main__':
  matrix = [[1,2,3],[4,5,6],[7,8,9]]
  result = transpose(matrix)
  print(result)

def time_ten(start_index: int,end_index: int):
  data = {}
  for i in range(start_index,end_index+1):
    data[i] = 10 * i

  return data

if __name__ == "__main__":
  result = time_ten(3,6)
  print(result)

def factorial(n: int):
  data = {1:1}
  for i in range(2,n+1):
    data[i] = data[i-1] * i
  return data

if __name__ == "__main__":
  result = factorial(5)
  print(result[2])
  print(result[3])
  print(result[4])

word_list = [
  "banana", "milk", "beer", "cheese", "sourmilk", "juice", "sausage",
  "tomato", "cucumber", "butter", "margarine", "cheese", "sausage",
  "beer", "sourmilk", "sourmilk", "butter", "beer", "chocolate"
]

def count():
  global word_list
  data = {}
  for word in word_list:
    if word not in data:
      data[word] = 0

    data[word] += 1
  return data

if __name__ == "__main__":
  result = count()
  print(result)

def catagorize_by_initial():
  global word_list

  groups = {}

  for word in word_list:
    initial = word[0]

    if initial not in groups:
      groups[initial] = []

    groups[initial].append(word)

  return groups

result = catagorize_by_initial()
for key,value in result.items():
  print(f"Words starting with letter {key}: ")
  for i in value:
    print(i)

def histogram(word):
  data = {}
  for letter in word:
    if letter not in data:
      data[letter] = 0
    data[letter] += 1

  return data

if __name__ == "__main__":
  result = histogram("statistically")
  for key,value in result.items():
    print(key,value * "*")

from ast import NotIn
#PhoneBook version 1
storage = dict()
def search():
  search = input("name: ")
  if not storage.get(search):
    print("no number")
  else:
    print(storage[search])

def add():
  global storage
  name = input("name: ")
  number = int(input("number: "))
  storage[name] = number
  print("ok")

while True:
  choice = int(input("command (1 search, 2 add, 3 quit): "))
  if choice == 1:
    search()
  elif choice == 2:
    add()
  elif choice == 3:
    print("quitting...")
    break
  else:
    print("Invalid Choice")

#PhoneBook Version 2
storage = dict()
def search():
  search = input("name: ")
  if not storage.get(search):
    print("no number")
  else:
    for i in storage[search]:
      print(i)

def add():
  global storage
  name = input("name: ")
  number = int(input("number: "))
  if name not in storage:
    storage[name] = []
  storage[name].append(number)
  print("ok")

while True:
  choice = int(input("command (1 search, 2 add, 3 quit): "))
  if choice == 1:
    search()
  elif choice == 2:
    add()
  elif choice == 3:
    print("quitting...")
    break
  else:
    print("Invalid Choice")

def invert(data: dict):
  new_data = dict()
  for key,value in data.items():
    new_data[value] = key

  return new_data

if __name__ == "__main__":
  s = {1: "first", 2: "second", 3: "third", 4: "fourth"}
  result = invert(s)
  print(result)

def dict_of_numbers(number: int):
  ones = {0: "zero", 1: "one", 2: "two", 3: "three", 4: "four",
          5: "five", 6: "six", 7: "seven", 8: "eight", 9: "nine"}

  teens = {10: "ten", 11: "eleven", 12: "twelve", 13: "thirteen",
            14: "fourteen", 15: "fifteen", 16: "sixteen",
            17: "seventeen", 18: "eighteen", 19: "nineteen"}

  tens = {20: "twenty", 30: "thirty", 40: "forty", 50: "fifty",
          60: "sixty", 70: "seventy", 80: "eighty", 90: "ninety"}

  numbers = dict()

  numbers.update(ones)
  numbers.update(teens)


  for i in tens:
    for j in ones:
      numbers[i+j] = (tens[i]+ "-" + ones[j])

  print(numbers[number])
if __name__ == "__main__":
  dict_of_numbers(13)
  dict_of_numbers(36)
  dict_of_numbers(0)
  dict_of_numbers(43)

def add_movie(database: list, name: str, director: str, year: int, runtime: int):
  data = {"name" : name, "director": director, "year" : year, "runtime" : runtime}
  database.append(data)

def find_movies(database: list, search_term: str):
  result = []
  for movie in database:
    if search_term.lower() in movie["name"].lower():
      result.append(movie["name"])
  return result

if __name__ == "__main__":
  database = []
  add_movie(database, "Gone with the Python", "Victor Pything", 2017, 116)
  add_movie(database, "Pythons on a Plane", "Renny Pytholin", 2001, 94)
  print(database)

  my_movies = find_movies(database, "python")
  print(my_movies)

def create_tuple(x: int,y: int,z: int):
  a = [x,y,z]
  result = min(a),max(a),sum(a)
  return tuple(result)

if __name__ == "__main__":
  print(create_tuple(5, 3, -1))

def oldest_person(people: list):
  minimum = float("inf")
  name_chaser = None #XD
  for i in people:
    if i[1] < minimum:
      minimum = i[1]
      name_chaser = i[0]
  return name_chaser

if __name__ == "__main__":
  p1 = ("Adam", 1977)
  p2 = ("Ellen", 1985)
  p3 = ("Mary", 1953)
  p4 = ("Ernest", 1997)
  people = [p1, p2, p3, p4]

  print(oldest_person(people))

def older_people(people: list, year: int):
  result = []
  for i in people:
    if i[1] < year:
      result.append(i[0])
  return result

if __name__ == "__main__":
  p1 = ("Adam", 1977)
  p2 = ("Ellen", 1985)
  p3 = ("Mary", 1953)
  p4 = ("Ernest", 1997)
  people = [p1, p2, p3, p4]

  older = older_people(people, 1979)
  print(older)

# student database

def add_student(database, student: str ,arg = None) -> None:
  database[student] = arg if arg is not None else []

def print_student(database,student: str) -> None:

  if student not in database:
    print(f"{student}: no such person exists in the the database")
  elif not database[student]:
    print(f"{student}:")
    print("no completed course")
  else:
    print(f"{student}:")

    for courses,ratings in database[student]:
      print(f"{courses} {ratings}")

    credits = [scores for _ , scores in database[student]]
    average = sum(credits)/len(credits)
    print(f"Average grade: {average:.1f}")


def add_course(database,student: str, arg : tuple) -> None:
  if student in database:
    for i,(course,credit) in enumerate(database[student]):
      if arg[0] == course:
        if arg[1] > credit:
          database[student][i] = arg
        return

    if arg[1] != 0:
      database[student].append(arg)

  else:
      print(f"{student} does not exist in the database.")

def summary(database: dict) -> None:
  students = list(database.keys())

  most_course_completed = 0
  most_courses_completed_std = ""
  result = {}
  for i in range(len(students)):
    if len(database[students[i]]) > most_course_completed:
      most_course_completed = len(database[students[i]])
      most_courses_completed_std = students[i]

    length = len(database[students[i]])
    total_sum = 0
    for data in database[students[i]]:
      total_sum += data[1]
    average = total_sum / length
    result[students[i]] = average

  student = students[0]
  highest_gpa = result[student]

  for k,v in result.items():
    if v > highest_gpa:
      highest_gpa = v
      student = k

  print("students",len(database))
  print(f"most course completed {most_course_completed} {most_courses_completed_std}")
  print(f"Best average grade {highest_gpa} {student}")


if __name__ == "__main__":
  students = {}
  add_student(students, "Peter")
  add_student(students, "Eliza")
  add_course(students, "Peter", ("Data Structures and Algorithms", 1))
  add_course(students, "Peter", ("Introduction to Programming", 1))
  add_course(students, "Peter", ("Advanced Course in Programming", 1))
  add_course(students, "Eliza", ("Introduction to Programming", 5))
  add_course(students, "Eliza", ("Introduction to Computer Science", 4))
  summary(students)

"""# Reading Files

"""

from google.colab import drive
import shutil
import os

drive.mount('/content/drive')
# shutil.copytree("/content/Reading_Files", "/content/drive/MyDrive/Reading_Files", dirs_exist_ok=True)

folder_path = "/content/drive/MyDrive/Reading_Files"

files = os.listdir(folder_path)
print(files)

with open("/content/drive/MyDrive/Reading_Files/Example.txt") as file:
  content = file.read()
  print(content)

with open("/content/drive/MyDrive/Reading_Files/Example.txt") as new_file:
  count = 0
  total_length = 0
  for line in new_file:
    line = line.replace("\n","")
    count += 1
    print("line",count,line)
    total_length += len(line)
  print("Total length of lines",total_length)

def largest():
  with open("/content/drive/MyDrive/Reading_Files/numbers.txt") as file:
    data = [int(line.strip()) for line in file]
    print(max(data))

largest()

with open("/content/drive/MyDrive/Reading_Files/grades.csv") as file:
  for line in file:
    line = line.strip()
    parts = line.split(";")
    print("name:",parts[0])
    print("Grades:",parts[1:])

def read_fruits():
  result = dict()
  with open("/content/drive/MyDrive/Reading_Files/fruits.csv") as file:
    for line in file:
      line = line.strip()
      parts = line.split(";")
      result[parts[0]] = parts[1]
  print(result)

if __name__ == "__main__":
  read_fruits()

def matrix_sum():
  total = 0
  with open("/content/drive/MyDrive/Reading_Files/my_matrix.txt") as file:
    for line in file:
      line = line.strip()
      result = [int(i) for i in line.split(",")]
      total += sum(result)
  print("Total sum of the matrix is",total)

def matrix_max():
  new_list = []
  with open("/content/drive/MyDrive/Reading_Files/my_matrix.txt") as file:
    for line in file:
      line = line.strip()
      new_list.extend([int(i) for i in line.split(",")])
  print("Largest value of the matrix is",max(new_list))

def row_sum():
  data = []
  with open("/content/drive/MyDrive/Reading_Files/my_matrix.txt") as file:
    for line in file:
      line = line.strip()
      result = [int(i) for i in line.split(",")]
      data.append(sum(result))
  print("Row sum of the matrix are",data)

def main():
  matrix_sum()
  matrix_max()
  row_sum()

if __name__ == "__main__":
  main()

peoples = []
with open("/content/drive/MyDrive/Reading_Files/people.csv") as file:
  for line in file:
    line = line.strip()
    data = line.split(";")
    peoples.append((data[0],data[1],data[2]))

oldest = -1
name = ''
for person in peoples:
  if int(person[1]) > oldest:
    oldest = int(person[1])
    name = person[0]
print("Oldest is {}".format(name))

data = dict()
with open("/content/drive/MyDrive/Reading_Files/grades.csv") as file:
  for line in file:
    line = line.strip()
    parts = line.split(";")
    data[parts[0]] = [int(i) for i in parts[1:]]

for names,grade_list in data.items():
  best = max(grade_list)
  average = sum(grade_list) / len(grade_list)
  print(f"Name: {names} grade {best} average {average}")

names = dict()
with open("/content/drive/MyDrive/Reading_Files/combination of files/employees.csv") as file:
  for line in file:
    line = line.split(";")
    if line[0] == "pic":
      continue
    names[line[0]] = line[1]

salaries = dict()
with open("/content/drive/MyDrive/Reading_Files/combination of files/salaries.csv") as file:
  for line in file:
    line = line.split(";")
    if line[0] == "pic":
      continue
    salaries[line[0]] = int(line[1]) + int(line[2])

print("income: ")
for i,v in names.items():
  if i in salaries:
    salary = salaries[i]
    print(v,salary,"euros")
print(v,0,"euros")

if False:
    student_info = input("Student information: ")
    exercise_data = input("Exercises completed: ")
else:

    student_info = "/content/drive/MyDrive/Reading_Files/course grading part 1/students.csv"
    exercise_data = "/content/drive/MyDrive/Reading_Files/course grading part 1/exercises.csv"

data = dict()

with open(student_info) as file:
  next(file)
  for line in file:
    line = line.strip().split(";")
    data[line[0]] = line[1] + " " + line[2]

with open(exercise_data) as file:
  next(file)
  for line in file:
    line = line.strip().split(";")
    student_id = line[0]
    exercises = sum([int(i) for i in line[1:]])

    id = data.get(student_id,"unknown student")
    print(id,exercises)

if False:
    student_info = input("Student information: ")
    exercise_data = input("Exercises completed: ")
    exam_points = input("Exams points: ")
else:

    student_info = "/content/drive/MyDrive/Reading_Files/course grading part 1/students.csv"
    exercise_data = "/content/drive/MyDrive/Reading_Files/course grading part 1/exercises.csv"
    exam_points = "/content/drive/MyDrive/Reading_Files/course grading part 2/exam_points.csv"

student_data = dict()
with open(student_info) as file:
  next(file)
  for line in file:
    line = line.strip().split(";")
    student_data[line[0]] = line[1] + " " + line[2]

exercises_completed = dict()
with open(exercise_data) as file:
  next(file)
  for line in file:
    line = line.strip().split(";")
    student_id = line[0]
    exercises = sum([int(i) for i in line[1:]])
    exercises_points = int(exercises / 40 * 10)

    id = student_data.get(student_id,"unknown student")
    exercises_completed[student_id] = [id,exercises,exercises_points]


result = dict()
with open(exam_points) as file:
  next(file)
  for line in file:
    line = line.strip().split(";")
    student_id = line[0]
    exam_points = sum([int(i) for i in line[1:]])


    id = exercises_completed.get(student_id,"unknown student")

    source = id[2]+exam_points

    if 0 <= source <= 14:
      print(id[0],0)
    elif 15 <= source <= 17:
      print(id[0],1)
    elif 18 <= source <= 20:
      print(id[0],2)
    elif 21 <= source <= 23:
      print(id[0],3)
    elif 24 <= source <= 27:
      print(id[0],4)
    else:
      print(id[0],5)

import copy

if False:
    student_info = input("Student information: ")
    exercise_data = input("Exercises completed: ")
    exam_points = input("Exams points: ")
else:

    student_info = "/content/drive/MyDrive/Reading_Files/course grading part 1/students.csv"
    exercise_data = "/content/drive/MyDrive/Reading_Files/course grading part 1/exercises.csv"
    exam_points = "/content/drive/MyDrive/Reading_Files/course grading part 2/exam_points.csv"

student_data = dict()
with open(student_info) as file:
  next(file)
  for line in file:
    line = line.strip().split(";")
    student_data[line[0]] = line[1] + " " + line[2]

exercises_completed = dict()
with open(exercise_data) as file:
  next(file)
  for line in file:
    line = line.strip().split(";")
    student_id = line[0]
    exercises = sum([int(i) for i in line[1:]])
    exercises_points = int(exercises / 40 * 10)

    id = student_data.get(student_id,"unknown student")
    exercises_completed[student_id] = [id,exercises,exercises_points]


result = dict()
final_result = exercises_completed.copy()
with open(exam_points) as file:
  next(file)
  for line in file:
    line = line.strip().split(";")
    student_id = line[0]
    exam_points = sum([int(i) for i in line[1:]])


    id = exercises_completed.get(student_id,"unknown student")
    source = id[2]+exam_points

    if 0 <= source <= 14:
      grade = 0
    elif 15 <= source <= 17:
      grade = 1
    elif 18 <= source <= 20:
      grade = 2
    elif 21 <= source <= 23:
      grade = 3
    elif 24 <= source <= 27:
      grade = 4
    else:
      grade = 5

    final_result[student_id].append(exam_points)
    final_result[student_id].append(source)
    final_result[student_id].append(grade)


print(f"{'name':<30}{'exec_num':<10}{'exec_pnts.':<10}{'exm_pnts.':<10}{'tot_pnts.':<10}{'grade':<10}")

for v in final_result.values():
    print(f"{v[0]:<30}{str(v[1]):<10}{str(v[2]):<10}{str(v[3]):<10}{str(v[4]):<10}{str(v[5]):<10}")

with open("/content/drive/MyDrive/Reading_Files/spell checker/word_list.txt") as file:
  data = set(word.strip().lower() for word in file)
text = input("Write text: ")
text_data = text.lower().split()
cleaned = []
for word in text_data:
  if word in data:
    cleaned.append(word)
  else:
    cleaned.append(f"*{word}*")
print(" ".join(cleaned))

def search_by_name(filename: str, dish: str):
  with open(filename) as file:
    content = file.read().strip()
    data = content.split("\n\n")
    recipe_names = []
    for recipe in data:
      recipe = recipe.split("\n")
      recipe_names.append(recipe[0])

    result = []
    for names in recipe_names:
      if dish.lower() in names.lower():
        result.append(names)

    return result

if __name__ == "__main__":
  if True:
    file_name = "/content/drive/MyDrive/Reading_Files/Recipe search part 1/recipes.txt"
    dish =  "cake"
  else:
    file_name = input("Enter file: ")
    dish = input("Enter recipe name: ")


  found_recipes = search_by_name(file_name, dish)

  for recipe in found_recipes:
    print(recipe)

from google.colab import drive

drive.mount("/content/drive")

def search_by_time(filename: str, time: int):
  with open(filename) as file:
    content = file.read().strip()
    data = content.split("\n\n")
    recipe_names_times =  dict()
    for recipe in data:
      recipe = recipe.split("\n")
      recipe_names_times[recipe[0]] = recipe[1]

    result = []
    for names,duration in recipe_names_times.items():
      if time == int(duration):
        result.append([names,duration])


    return result

if __name__ == "__main__":
  if True:
    file_name = "/content/drive/MyDrive/Reading_Files/Recipe search part 2/recipes.txt"
    time =  10
  else:
    file_name = input("Enter file: ")
    time = int(input("Enter recipe time: "))


  found_recipes = search_by_time(file_name, time)

  for recipe,duration in found_recipes:
    print(recipe,duration)

def search_by_ingredient(filename: str, ing: str):
  with open(filename) as file:
    content = file.read().strip()
    data = content.split("\n\n")
    ingredients =  dict()
    for recipe in data:
      recipe = recipe.split("\n")
      ingredients[recipe[0]] = [recipe[1],"\n".join(recipe[2:]).lower()]

    # print(ingredients)
    result = []
    for names,materials in ingredients.items():
      if ing in materials[1]:
        result.append([names,materials[0],materials[1]])

    return result

if __name__ == "__main__":
  if True:
    file_name = "/content/drive/MyDrive/Reading_Files/Recipe search part 3/recipes.txt"
    ing =  "butter".lower()
  else:
    file_name = input("Enter file: ").lower()
    time = int(input("Enter recipe time: "))


  found_recipes = search_by_ingredient(file_name, ing)

  print(f"{'Recipes':<15} {'preperation time':>20} ")
  for recipe,duration,ingredient in found_recipes:
    print(f"{recipe:<15}  {duration:>5} minutes")

import math

def get_station_data(filename: str):
  station_data = dict()
  with open(filename) as file:
    next(file)
    for line in file:
      line = line.strip().split(";")
      station_data[line[3]] = (float(line[0]),float(line[1]))
  return station_data

def distance(stations: dict, station1: str, station2: str):
  if station1 not in stations or station2 not in stations:
    print("one or both station name do not exist in station's data")
    return None

  longitude1,latitude1 = stations[station1]
  longitude2,latitude2 = stations[station2]

  x_km = (longitude1 - longitude2) * 55.26
  y_km = (latitude1 - latitude2) * 111.2
  distance_km = math.sqrt(x_km**2 + y_km**2)

  return distance_km

if __name__ == "__main__":
  if True:
    stations = get_station_data("/content/drive/MyDrive/Reading_Files/city bikes part 1/city_bikes.csv")
    d = distance(stations, "Kaivopuisto", "Laivasillankatu")
  else:
    file_name = input("Enter the file: ")
    stations = get_station_data(file_name)
    station1 = input("Enter the name of the station1: ")
    station2 = input("Enter the name of the station2: ")
    d = distance(stations, station1, station2)
  print(d)

import math

def get_station_data(filename: str):
  station_data = dict()
  with open(filename) as file:
    next(file)
    for line in file:
      line = line.strip().split(";")
      station_data[line[3]] = (float(line[0]),float(line[1]))
  return station_data

def greatest_distance(stations: dict):
  greatest_dist = 0
  station_one = ""
  station_two = ""
  station_names = list(stations.keys())
  for i in range(len(stations)):
    for j in range(i+1,len(stations)):
      station1 = station_names[i]
      station2 = station_names[j]

      longitude1,latitude1 = stations[station1]
      longitude2,latitude2 = stations[station2]

      x_km = (longitude1 - longitude2) * 55.26
      y_km = (latitude1 - latitude2) * 111.2
      distance_km = math.sqrt(x_km**2 + y_km**2)

      if distance_km > greatest_dist:
        greatest_dist = distance_km
        station_one = station1
        station_two = station2


  return station_one,station_two,greatest_dist

if __name__ == "__main__":
  if True:
    stations = get_station_data("/content/drive/MyDrive/Reading_Files/city bikes part 1/city_bikes.csv")
    station1, station2, greatest = greatest_distance(stations)
    print(station1, station2, greatest)
  else:
    file_name = input("Enter the file: ")
    stations = get_station_data(file_name)

"""# Writing Files

"""

with open("/content/drive/MyDrive/Writing_Files/myfile.txt","w") as file:
  file.write("hello there\n")
  file.write("My name is onion\n")
  file.write("and i love eyes\n")

name = input("Whom should i sign this to: ")
folder_path = "/content/drive/MyDrive/Writing_Files/"
file_name = input("Where shall i save it: ")
full_path = folder_path + file_name

with open(full_path,"w") as file:
  file.write(f"Hi {name}, we hope you enjoy learning Python with us! Best, onion Team")

with open(full_path) as file:
  content = file.read()
  print(content)

from google.colab import drive

drive.mount("/content/drive")

while True:
  choice = int(input("1 - add an entry, 2 - read entries, 0 - quit\nFunction: "))
  if choice == 1:
    with open("/content/drive/MyDrive/Writing_Files/Diary/diary.txt","a") as file:
      file.write(input("Diary entry: ")+"\n")
      print("entry added!")
  elif choice == 2:
    with open("/content/drive/MyDrive/Writing_Files/Diary/diary.txt") as file:
      content = file.read()
      print(content.strip())
  elif choice == 0:
    break
  else:
    print("Invalid choice")
print("bye now")

import csv
def filter_solution():
  with open("/content/drive/MyDrive/Writing_Files/Filtering the content of the file/solution.csv",newline = "") as source_file,\
      open("/content/drive/MyDrive/Writing_Files/Filtering the content of the file/correct.csv","w",newline = "") as correct_file,\
      open("/content/drive/MyDrive/Writing_Files/Filtering the content of the file/incorrect.csv","w",newline = "") as incorrect_file:

    content = csv.reader(source_file,delimiter = ";")
    correct = csv.writer(correct_file)
    incorrect = csv.writer(incorrect_file)

    for row in content:
      # print(repr(row))
      if eval(row[1]) == int(row[2]):
        correct.writerow(row)
      else:
        incorrect.writerow(row)

if __name__ == "__main__":
  filter_solution()
  filter_solution()
  filter_solution()

import csv

def store_personal_data(*person: tuple):
  with open("/content/drive/MyDrive/Writing_Files/store personal data/people.csv","a",newline = "") as file:
    writer = csv.writer(file,delimiter = ";")
    writer.writerow(person)

if __name__ == "__main__":
  store_personal_data("onion",3,"special")

import copy
import csv

def student_data(filename: str) -> dict:
  students = {}
  with open(filename) as file:
    next(file)
    for line in file:
      line = line.strip().split(";")
      students[line[0]] = line[1] + " " + line[2]
  return students

def exercise(filename: str) -> dict:
  exercise_data = dict()
  with open(filename) as file:
    next(file)
    for line in file:
      line = line.strip().split(";")
      student_id = line[0]
      exercises = sum([int(i) for i in line[1:]])
      exercises_points = int(exercises / 40 * 10)

      id = student_data.get(student_id,"unknown student")
      exercise_data[student_id] = [id,exercises,exercises_points]

  return exercise_data

def get_grade(source : int) -> int:
  if 0 <= source <= 14:
    grade = 0
  elif 15 <= source <= 17:
    grade = 1
  elif 18 <= source <= 20:
    grade = 2
  elif 21 <= source <= 23:
    grade = 3
  elif 24 <= source <= 27:
    grade = 4
  else:
    grade = 5

  return grade

def result_calculation(filename: str,exercise_data :dict) -> dict:
  result = exercise_data.copy()
  with open(filename) as file:
    next(file)
    for line in file:
      line = line.strip().split(";")
      student_id = line[0]
      exam_point = sum([int(i) for i in line[1:]])
      data = exercises_completed.get(student_id,"unknown student")
      total_points = data[2]+exam_point

      grade = get_grade(total_points)

      result[student_id].append(exam_point)
      result[student_id].append(total_points)
      result[student_id].append(grade)

  return result

def display_result(result_data: dict) -> None:
  print(f"{'name':<30}{'exec_num':<10}{'exec_pnts.':<10}{'exm_pnts.':<10}{'tot_pnts.':<10}{'grade':<10}")

  for data in result_data.values():
      print(f"{data[0]:<30}{str(data[1]):<10}{str(data[2]):<10}{str(data[3]):<10}{str(data[4]):<10}{str(data[5]):<10}")

def save_result(result_data: dict) -> None:
  name = input("name: ")
  credits = input("study credits: ")

  with open("/content/drive/MyDrive/Writing_Files/course grading part 4/result.txt","w",newline = "") as text_file:
    header = f"{name}, {credits} credits"
    text_file.write(f"{header}\n")
    text_file.write("=" * len(header) + "\n")
    text_file.write(f"{'name':30} {'exec_nbr':<10} {'exec_pts.':<10} {'exm_pts.':<10} {'tot_pts.':<10} {'grade'}\n")

    for data in result_data.values():
        full_name = data[0]
        exec_nbr = data[1]
        exec_pts = data[2]
        exam_pts = data[3]
        total_pts = data[4]
        grade = data[5]
        text_file.write(f"{full_name:30} {exec_nbr:<10} {exec_pts:<10} {exam_pts:<10} {total_pts:<10} {grade}\n")

  with open("/content/drive/MyDrive/Writing_Files/course grading part 4/result.csv","w",newline = "") as file:
    writer = csv.writer(file,delimiter = ";")
    writer.writerow(["Id", "Name", "Exercise_Numbers", "Exercise_points", "Exam_points", "Total_points", "Grade"])

    for student_id,exam_data in result_data.items():
      writer.writerow([student_id]+exam_data)

  print("results written to the files result.csv and result.txt")


if __name__ == "__main__":
  if False:
    student_info = input("Student file: ")
    exercise_data = input("Exercise file: ")
    exam_points = input("Exams_points file: ")
  else:
    student_info = "/content/drive/MyDrive/Reading_Files/course grading part 1/students.csv"
    exercise_data = "/content/drive/MyDrive/Reading_Files/course grading part 1/exercises.csv"
    exam_points = "/content/drive/MyDrive/Reading_Files/course grading part 2/exam_points.csv"

  student_data = student_data(student_info)
  exercises_completed = exercise(exercise_data)
  final_result = result_calculation(exam_points,exercises_completed)
  save_result(final_result)

from google.colab import drive

drive.mount("/content/drive")

def find_words(search_term: str,myfile: str):
  result = []
  with open(myfile) as file:
    for line in file:
      word = line.strip()

      if "*" in search_term:

        if search_term.startswith("*"):
          ending = search_term[1:]
          if word.endswith(ending):
            result.append(word)
        elif search_term.endswith("*"):
          starting = search_term[:-1]
          if word.startswith(starting):
            result.append(word)

      elif "." in search_term:

        if len(search_term) == len(word):
          mark = True
        for sc,wc in zip(search_term,word):
          if sc != "." and wc != sc:
            mark = False
            break
        if mark:
          result.append(word)

      else:
        if search_term == word:
          result.append(word)

  return result
if __name__ == "__main__":
  file = "/content/drive/MyDrive/Writing_Files/Word search/words.txt"
  result = find_words("c.r",file)
  print(result)
  result = find_words("ca*",file)
  print(result)

def add(filename : str) -> None:
  english = input("The word in english: ").lower()
  urdu = input("The word in urdu: ").lower()
  with open(filename) as file:
    for line in file:
      if line.strip().lower() == f"{english};{urdu}":
        print("The entry already exists.")
        return

  with open(filename,"a") as file:
    file.write(f"{english};{urdu}"+"\n")

def search(filename : str) -> None:
  word = input("Search term: ").lower()
  with open(filename) as file:
    for line in file:
      line = line.strip().lower().split(";")
      if word in line:
        print(*line)

def main(file: str):
  while True:
    choice = int(input("1 - Add word, 2 - Search, 3 - Quit Function: "))
    if choice == 1:
      add(file)
    elif choice == 2:
      search(file)
    elif choice == 3:
      print("bye")
      break

if __name__ == "__main__":
  file = "/content/drive/MyDrive/Writing_Files/Dictionary stored in a file/dictionary.txt"
  main(file)

def read_input(text: str, low: int, high: int) -> int:
  while True:
    try:
      number = int(input(text))
      if number >= 5 and number <= 10:
        return number
      else:
        print("You must type in an integer between 5 and 10 Please type in a number")
    except ValueError:
      print("You must type in an integer between 5 and 10 Please type in a number")


if __name__ == "__main__":
  number = read_input("Please type in a number: ", 5, 10)
  print("You typed in:", number)

def new_person(name: str, age: int):
  if type(name) != str or type(age) != int:
    raise ValueError("Wrong type of parameter are given")
  if  len(name) < 40:
    raise ValueError("The length of the name must be greater than 40")
  if name == "":
    raise ValueError("Name cannot be empty")

  if len(name.strip().split()) < 2:
    raise ValueError("Name must have atleast two words")
  if 0 > age >= 150:
    raise ValueError("Age is out of range")

  return (name,age)
if __name__ == "__main__":
  result = new_person("Garlic chessy sause onion ketchup with sprite apple lemonade",15)
  print(result)

from google.colab import drive

drive.mount("/content/drive")

import csv

def Incorrect_lottery_numbers(infile):
  with open(infile,newline = "") as file,\
       open("/content/drive/MyDrive/Writing_Files/Incorrect lottery numbers/correct.csv","w",newline = "") as outfile:

    reader = csv.reader(file,delimiter = ";")
    writer = csv.writer(outfile,delimiter = ";")

    for row in reader:
      if len(row) != 2:
        print("Invalid format",row)
        continue

      week_data,lottery_data = row

      week_data = week_data.strip().split()

      if len(week_data) != 2 or week_data[0].lower() != "week":
        print("Invalid format")
        continue
      try:
        week_num = int(week_data[1])
      except ValueError:
        print("week_num must be interger")
        continue

      lottery_data = lottery_data.strip().split(",")
      if len(lottery_data) != 7:
        print("Too few Numbers")
        continue

      seen = set()
      valid = True
      for num in lottery_data:
        try:
          num = int(num)
          if not(num >= 1 and num <= 39):
            print("The numbers are too small or large")

          if num in seen:
            print("Dublicate number found")
            valid = False
          seen.add(num)
        except ValueError:
          print("One or more value are not correct")
          valid = False

      if valid:
        breakpoint()
        writer.writerow(row)


if __name__ == "__main__":
  file = "/content/drive/MyDrive/Writing_Files/Incorrect lottery numbers/lottery numbers.csv"
  Incorrect_lottery_numbers(file)

import string

def seperate_characters(my_string : str) -> tuple:
  ascii_characters = ""
  punctuation = ""
  others = ""
  for char in my_string:
    if char in string.ascii_letters:
      ascii_characters += char
    elif char in string.punctuation:
      punctuation += char
    else:
      others += char
  return (ascii_characters,punctuation,others)
if __name__ == "__main__":
  result = seperate_characters("OlÃ©!!! Hey, are Ã¼mlÃ¤Ã¼ts wÃ¶rking?")
  for i in result:
    print(i)

from random import sample,seed

def lottery_numbers(amount: int, lower: int, upper: int) -> list:
  seed(41)
  numbers = list(range(lower,upper+1))
  result = sample(numbers,amount)
  return result

if __name__ == "__main__":
  for i in lottery_numbers(7, 1, 40):
    print(i)

from random import choices

def generate_password(length: int) -> str:
  letters = "abcdefghijklmnopqrstuvwxyz"
  password = choices(letters,k = length)
  return "".join(password)

if __name__ == "__main__":
  for i in range(10):
      print(generate_password(8))

from random import choices

def generate_strong_password(length: int,numbers: bool,schar: bool) -> str:
  letters = "abcdefghijklmnopqrstuvwxyz"
  num = "0123456789"
  sc = "!?=+-()#"
  charset = letters

  if numbers:
    charset += num
  if schar:
    charset += sc

  if len(charset) == 0:
    raise ValueError("Character set cannot be empty")

  return "".join(choices(charset,k = length))


if __name__ == "__main__":
  for i in range(10):
    print(generate_strong_password(8, True, True))

from random import choice

def roll(dice: str) -> int:
  A = [3,3,3,3,3,6]
  B = [2,2,2,5,5,5]
  C = [1,4,4,4,4,4]

  if dice == "A":
    return choice(A)
  elif dice == "B":
    return choice(B)
  elif dice == "C":
    return choice(C)
  else:
    raise ValueError("Invalid dice. Choose A,B or C")

def play(die1: str, die2: str, times: int) -> tuple:
  dice1 = 0
  dice2 = 0
  tie = 0
  for i in range(times):
    a = roll(die1)
    b = roll(die2)

    if a > b:
      dice1 += 1
    elif b > a:
      dice2 += 1
    else:
      tie += 1

  return (dice1,dice2,tie)
if __name__ == "__main__":
  result = play("A", "C", 1000)
  print(result)
  result = play("B", "B", 1000)
  print(result)

from google.colab import drive

drive.mount("/content/drive")

from random import sample

def words(n: int, beginning: str):
  result = []
  with open("/content/drive/MyDrive/Writing_Files/Random Words/Words.txt") as file:
    for line in file:
      line = line.strip()
      if line.startswith(beginning):
        result.append(line)

  if len(result) < n:
    raise ValueError("not enough words in dictionary")

  return sample(result,n)

if __name__ == "__main__":
  word_list = words(3, "ca")
  for word in word_list:
      print(word)

from datetime import datetime,timedelta

date_of_birth = datetime(2005,3,7)
print(date_of_birth.year)
print(date_of_birth.month)
print(date_of_birth.day)

time_here = datetime(2025,6,29,21,5)
print(time_here)

mid_summer = datetime(2025,6,26)

if time_here > mid_summer:
  print("it is past mid summer")
elif time_here < mid_summer:
  print("it is not mid summer yet")
else:
  print("Happy mid summer!")


remaining_time =  mid_summer - time_here
print("Mid Summer is",remaining_time.days,"days away")

present = datetime.now()
future = present + timedelta(days = 30)
past = present - timedelta(hours = 12)

print(present)
print(future)
print(past)


midnight = datetime(2025,6,29)
difference = midnight - present
print("mid night is",difference.seconds,"seconds away")

from datetime import datetime,timedelta

def old(day: int,month: int,year: int) -> None :
  date_of_birth = datetime(year,month,day)
  millinium = datetime(1999, 12, 31, 23, 59, 59)

  difference = millinium - date_of_birth

  if date_of_birth > millinium:
    print("You weren't born yet on the eve of the new millennium")
  else:
    age = difference.days //365
    print("you were",age,"old on the eve of the new millenium")

if __name__ == "__main__":
  year = int(input("Enter the year: "))
  month = int(input("Enter the month: "))
  day = int(input("Enter the day: "))
  old(day,month,year)

from datetime import datetime,timedelta

def record_screen_time():
  path = "/content/drive/MyDrive/Writing_Files/Screen time/"
  filename = input("Filename: ")
  file = path + filename
  start_date = input("Starting date: ")
  how_many = int(input("How many days: "))

  date = datetime.strptime(start_date,"%Y.%m.%d")
  data = []
  for i in range(how_many):
    data.append(date)
    date += timedelta(days = 1)

  print("Please type in screen time in minutes on each day (TV computer mobile):")
  result = []
  for date in data:
    date = datetime.strftime(date,"%d.%m.%Y")
    info = input(f"Screen time {date}: ")

    result.append(f"Screen time {date}:{info.replace(' ','/')}")

  with open(file,"a") as file:
    file.write("\n".join(result)+"\n")
  print("data stored in file",filename)
if __name__ == "__main__":
  record_screen_time()

import json

with open("/content/drive/MyDrive/Writing_Files/courses.json") as file:
  content = file.read()

courses = json.loads(content)
for course in courses:
  print(course["name"])

def print_persons(filename: str):
  with open(filename) as file:
    content = file.read()

  data = json.loads(content)

  for info in data:
    name = info["name"]
    age = info["age"]
    hobbies = info["hobbies"]

    print((f"{name} {age} ({','.join(hobbies)})"))


if __name__ == "__main__":
  if False:
    filename = input("Enter file: ")
    print_persons(filename)
  else:
    filename = "/content/drive/MyDrive/Writing_Files/Handling json files/data.json"
    print_persons(filename)

import urllib.request

response = urllib.request.urlopen("https://www.w3schools.com/")
print(response.read())

import requests
from pprint import pprint

def retrieve_all() -> list:
  url = "https://studies.cs.helsinki.fi/stats-mock/api/courses"
  response = requests.get(url)

  courses = response.json()
  active_courses = []
  for course in courses:
    if course.get("enabled",False):
      active_courses.append((course["fullName"],course["name"],course["year"],sum(course["exercises"])))

  return active_courses

def retrieve_course(course: str) -> dict:
  url = f"https://studies.cs.helsinki.fi/stats-mock/api/courses/{course}/stats"
  response = requests.get(url)

  course_data = response.json()

  result = dict()
  weeks = len(course_data)
  students = 0
  hours = 0
  exercises = 0

  for k,v in course_data.items():
    students += v["students"]
    hours += v["hour_total"]
    exercises += v["exercise_total"]

  average_hours = hours // students
  average_exercises = exercises // students

  result["weeks"] = weeks
  result["students"] = students
  result["hours"] = hours
  result["hours_average"] = average_hours
  result["exercises"] = exercises
  result["exercises_average"] = average_exercises

  return result

def main():
  data = retrieve_all()
  courses_names = [course[1] for course in data]
  course_data = retrieve_course(courses_names[2])

  pprint(course_data)
if __name__ == "__main__":
  main()

from google.colab import drive

drive.mount("/content/drive")

from datetime import datetime,timedelta
from pprint import pprint
import csv

def cheaters():
  start_time = dict()
  cheater_set = set()
  honest_student = set()
  with open("/content/drive/MyDrive/Writing_Files/Who cheated/start_time.csv",newline = "") as start_file,\
       open("/content/drive/MyDrive/Writing_Files/Who cheated/submission.csv") as end_file:

    start = csv.reader(start_file,delimiter = ";")
    end = csv.reader(end_file,delimiter = ";")

    for row in start:
      student = row[0]
      time = datetime.strptime(row[1],"%H:%M")
      start_time[student] = time

    for row in end:
      student = row[0]
      submit_time = datetime.strptime(row[3],"%H:%M")

      is_student = start_time.get(student)
      if is_student:
        duration = submit_time - is_student
        if duration > timedelta(hours = 3):
          cheater_set.add(student)
        else:
          honest_student.add((student,row[1],row[2]))

    with open("/content/drive/MyDrive/Writing_Files/Who cheated/cheaters.csv","w",newline = "") as file:
      writer = csv.writer(file)
      for name in sorted(cheater_set):
        writer.writerow([name])
  return honest_student

def final_points(students):
  with open("/content/drive/MyDrive/Writing_Files/Who cheated/honest_students.csv","w",newline = "") as file:
    writer = csv.writer(file)
    writer.writerow(["Name","Tasks","Points"])
    for student in students:
      writer.writerow(student)

def main():
  students = cheaters()
  final_points(students)

if __name__ == "__main__":
  main()

import difflib

def spell_checker():
  with open("/content/drive/MyDrive/Reading_Files/spell checker/word_list.txt") as file:
    data = set(word.strip().lower() for word in file)

  text = input("Write text: ")
  text_data = text.lower().split()
  cleaned = []

  for word in text_data:
    if word in data:
      cleaned.append(word)
    else:
      cleaned.append(f"*{word}*")

  print(" ".join(cleaned))
  print("suggestion:")

  for words in text_data:
    if words not in data:
      suggestions = difflib.get_close_matches(words,data,n = 3,cutoff = 0.5)
      print(f"{words}: {','.join(suggestions) if suggestions else 'no suggestion'}")

if __name__ == "__main__":
  spell_checker()